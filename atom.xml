<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>鲁西西杂货店</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-06T09:43:25.194Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wangyunlong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于js Event loop和任务队列的一点理解</title>
    <link href="http://yoursite.com/2019/06/06/%E5%85%B3%E4%BA%8Ejs-Event-loop%E5%92%8C%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97%E7%9A%84%E4%B8%80%E7%82%B9%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/06/06/关于js-Event-loop和任务队列的一点理解/</id>
    <published>2019-06-06T07:45:14.000Z</published>
    <updated>2019-06-06T09:43:25.194Z</updated>
    
    <content type="html"><![CDATA[<p>之前在掘金上面看到很多文章都在说Event loop和事件队列，一直没有弄得很明白，直到最近几天，一个后端同学问到一个关于事件循环的问题，发现自己根本没有搞清楚，于是找了些文章，有了一些理解，在这里记录下，加深对其的理解。</p><p>首先我们来看一道题目：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>); </span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>);</span><br></pre></td></tr></table></figure><p>如果对Event loop很熟悉的话，那这个自然不在话下，但是如果理解不到位的话，那可能会出一点小差错，你对了吗？</p><p>下面我们一起来看答案是什么，这里介绍两个概念：宏任务和微任务。</p><h2 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a>宏任务和微任务</h2><ul><li>宏任务：包括script（整体代码）、I/O、</li><li>微任务：包括定期器、网络请求、Promise.then</li></ul><p>当函数执行栈为空的时候，去轮询事件队列，发现有事件，就拿出来执行。当遇到异步任务，比如定期器、网络请求、Promise的等都会交给异步处理模块，一旦异步函数到达其触发条件，比如定时器到时、异步请求返回时，异步处理模块将其回调函数按照类型打包压入任务队列，这个就是微任务队列。不断轮训事件队列就是事件循环（Event loop）。当所有的宏任务都执行完毕后，会去处理微任务队列。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/event-loop.png" alt="images" title="">                </div>                <div class="image-caption">images</div>            </figure><p>那我们回过头在继续看上面的题目，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>);  <span class="comment">// 被加入到宏任务队列</span></span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;       <span class="comment">// 0毫秒后，回调函数被加入到微任务队列</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123; <span class="comment">// Promise 是宏任务，被加入到宏任务</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2'</span>);  <span class="comment">// resolve()执行之后，加入到微任务队列</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>); <span class="comment">// 被加入到宏任务队列</span></span><br></pre></td></tr></table></figure><p>所以就会打印出<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">script start</span><br><span class="line">promise1</span><br><span class="line">script end</span><br><span class="line">promise2</span><br><span class="line">setTimeout</span><br></pre></td></tr></table></figure></p><h2 id="为什么Promise-then回调要比setTimeout回调先执行？"><a href="#为什么Promise-then回调要比setTimeout回调先执行？" class="headerlink" title="为什么Promise.then回调要比setTimeout回调先执行？"></a>为什么Promise.then回调要比setTimeout回调先执行？</h2><p>是因为setTimeout是只在主线程最空闲的情况下，经过一定时间去执行回调函数，所以setTimeout会被放到任务队列的最后一个，所以最晚执行。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>事件循环（Event loop）：不断从事件队列取出任务执行的过程；</li><li>事件队列：宏任务和微任务构成的队列；</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前在掘金上面看到很多文章都在说Event loop和事件队列，一直没有弄得很明白，直到最近几天，一个后端同学问到一个关于事件循环的问题，发现自己根本没有搞清楚，于是找了些文章，有了一些理解，在这里记录下，加深对其的理解。&lt;/p&gt;
&lt;p&gt;首先我们来看一道题目：&lt;/p&gt;
&lt;f
      
    
    </summary>
    
    
      <category term="Node" scheme="http://yoursite.com/tags/Node/"/>
    
      <category term="浏览器" scheme="http://yoursite.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>前端知识-2019-6-4</title>
    <link href="http://yoursite.com/2019/06/04/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%BA%93/2019-6-4/"/>
    <id>http://yoursite.com/2019/06/04/面试题库/2019-6-4/</id>
    <published>2019-06-04T10:14:19.000Z</published>
    <updated>2019-06-06T07:43:19.621Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="前端知识" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="前端知识" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>构建base Image</title>
    <link href="http://yoursite.com/2019/04/03/docker/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%9E%84%E5%BB%BAbase-Image/"/>
    <id>http://yoursite.com/2019/04/03/docker/Docker学习笔记-构建base-Image/</id>
    <published>2019-04-03T04:55:12.000Z</published>
    <updated>2019-06-04T10:11:14.874Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>1.创建hello.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;hello&apos;)</span><br></pre></td></tr></table></figure></li><li><p>2.创建Dockerfile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM scratch                        // scratch代表没有baseImage</span><br><span class="line">ADD hello.js /                      // 添加到根目录</span><br><span class="line">CMD [&quot; node hello.js &quot;]             // 执行命令</span><br></pre></td></tr></table></figure></li><li><p>3.运行build命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t xxx .     // -t 表示tag xxx是tag名，.必不可少，表示在当前目录找Dockerfile</span><br></pre></td></tr></table></figure></li></ul><p>如果执行build命令执行成功，则构建成功，可以用<code>dockcer image ls</code>查看。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;1.创建hello.js&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;t
      
    
    </summary>
    
      <category term="Docker学习" scheme="http://yoursite.com/categories/Docker%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>egg-sequelize</title>
    <link href="http://yoursite.com/2019/03/15/egg/egg-sequelize/"/>
    <id>http://yoursite.com/2019/03/15/egg/egg-sequelize/</id>
    <published>2019-03-15T00:10:24.000Z</published>
    <updated>2019-06-06T06:55:51.854Z</updated>
    
    <content type="html"><![CDATA[<h3 id="egg-sequelize"><a href="#egg-sequelize" class="headerlink" title="egg-sequelize"></a>egg-sequelize</h3><p>在大型应用中，我们可能需要ORM框架来帮助我们管理数据层面工具，而sequelize在node社区中被广泛使用。它支持<code>MySql</code>,<code>PostgreSQL</code>,<code>SQLite</code>,<code>MSSQL</code>等多个数据源。</p><p>下面用demo演示如何利用egg-sequelize进行CRUD操作。</p><ul><li><p>初始化项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">egg-init --type=simple sequelize-demo</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure></li><li><p>配置config（config/config.default.js）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">config.sequelize = &#123;</span><br><span class="line">    port: 3306,</span><br><span class="line">    dialect: &apos;mysql&apos;,</span><br><span class="line">    host: &apos;localhost&apos;,</span><br><span class="line">    database: &apos;miao&apos;,</span><br><span class="line">    username: &apos;root&apos;,</span><br><span class="line">    password: &apos;123456&apos;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置插件 plugin.js（config/plugin.js）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">exports.sequelize = &#123;</span><br><span class="line">enable: true,</span><br><span class="line">package: ‘egg-sequelize’</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>安装egg-sequelize, sequelize-cli, mysql2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i egg-sequelize sequelize-cli mysql2</span><br></pre></td></tr></table></figure></li><li><p>sequelize配置文件 .sequelizerc</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    config: path.join(__dirname, &apos;database/config.json&apos;),</span><br><span class="line">    &apos;migrations-path&apos;: path.join(__dirname, &apos;database/migrations&apos;), // 用来控制数据库迁移的文件夹，需要修改表结构的时候，可以通过代码来控制数据库表结构的版本回退</span><br><span class="line">    &apos;seeders-path&apos;: path.join(__dirname, &apos;database/seeders&apos;), // 是存放如何生成假数据的文件夹</span><br><span class="line">    &apos;models-path&apos;: path.join(__dirname, &apos;app/models&apos;), // 是表中字段硬度和到JS对象中的逻辑，在controller中和service中可通过this.app.model或者this.ctx.model访问</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx sequelize init:config (生成database目录和配置文件config.json)</span><br><span class="line">npx sequelize init:migrations(生成database目录和子目录migrations)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// config.json</span><br><span class="line">&#123;</span><br><span class="line">  &quot;development&quot;: &#123;</span><br><span class="line">    &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;123456&quot;,</span><br><span class="line">    &quot;database&quot;: &quot;miao&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;localhost&quot;,</span><br><span class="line">    &quot;dialect&quot;: &quot;mysql&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;test&quot;: &#123;</span><br><span class="line">    &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;123456&quot;,</span><br><span class="line">    &quot;database&quot;: &quot;miao&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;localhost&quot;,</span><br><span class="line">    &quot;dialect&quot;: &quot;mysql&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;production&quot;: &#123;</span><br><span class="line">    &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;password&quot;: &quot;123456&quot;,</span><br><span class="line">    &quot;database&quot;: &quot;miao&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;localhost&quot;,</span><br><span class="line">    &quot;dialect&quot;: &quot;mysql&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>初始化user表<br><code>npx sequelize migration:generate --name=init-users</code>, 会在migration生成一个migration 文件(<code>${timestamp}-init-users.js</code>)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  // 在执行数据库升级时调用的函数，创建 users 表</span><br><span class="line">  up: async (queryInterface, Sequelize) =&gt; &#123;</span><br><span class="line">    const &#123; INTEGER, DATE, STRING &#125; = Sequelize;</span><br><span class="line">    await queryInterface.createTable(&apos;users&apos;, &#123;</span><br><span class="line">      id: &#123; type: INTEGER, primaryKey: true, autoIncrement: true &#125;,</span><br><span class="line">      name: STRING(30),</span><br><span class="line">      age: INTEGER,</span><br><span class="line">      created_at: DATE,</span><br><span class="line">      updated_at: DATE,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  // 在执行数据库降级时调用的函数，删除 users 表</span><br><span class="line">  down: async queryInterface =&gt; &#123;</span><br><span class="line">    await queryInterface.dropTable(&apos;users&apos;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>升级数据库<br><code>npx sequelize db:megrate</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 如果有问题需要回滚，可以通过 `db:migrate:undo` 回退一个变更</span><br><span class="line"># npx sequelize db:migrate:undo</span><br><span class="line"># 可以通过 `db:migrate:undo:all` 回退到初始状态</span><br><span class="line"># npx sequelize db:migrate:undo:all</span><br></pre></td></tr></table></figure></li><li><p>创建model</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// app/models/user.js</span><br><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">module.exports = app =&gt; &#123;</span><br><span class="line">  const &#123; STRING, INTEGER, DATE &#125; = app.Sequelize;</span><br><span class="line"></span><br><span class="line">  const User = app.model.define(&apos;user&apos;, &#123;</span><br><span class="line">    id: &#123; type: INTEGER, primaryKey: true, autoIncrement: true &#125;,</span><br><span class="line">    name: STRING(30),</span><br><span class="line">    age: INTEGER,</span><br><span class="line">    created_at: DATE,</span><br><span class="line">    updated_at: DATE,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  return User;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p>这样就可以在<code>app.model.User</code>或者 <code>ctx.model.User</code>上访问User。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">// service/user.js</span><br><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">const Service = require(&apos;egg&apos;).Service;</span><br><span class="line"></span><br><span class="line">class User extends Service &#123;</span><br><span class="line">  async list(&#123; offset = 0, limit = 10 &#125;) &#123;</span><br><span class="line">    return this.ctx.model.User.findAndCountAll(&#123;</span><br><span class="line">      offset,</span><br><span class="line">      limit,</span><br><span class="line">      order: [[ &apos;created_at&apos;, &apos;desc&apos; ], [ &apos;id&apos;, &apos;desc&apos; ]],</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  // 查找</span><br><span class="line">  async find(id) &#123;</span><br><span class="line">    const user = await this.ctx.model.User.findById(id);</span><br><span class="line">    if (!user) &#123;</span><br><span class="line">      this.ctx.throw(404, &apos;user not found&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">    return user;</span><br><span class="line">  &#125;</span><br><span class="line">  // 创建</span><br><span class="line">  async create(user) &#123;</span><br><span class="line">    return this.ctx.model.User.create(user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 更新</span><br><span class="line">  async update(&#123; id, updates &#125;) &#123;</span><br><span class="line">    const user = await this.ctx.model.User.findById(id);</span><br><span class="line">    if (!user) &#123;</span><br><span class="line">      this.ctx.throw(404, &apos;user not found&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">    return user.update(updates);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 删除</span><br><span class="line">  async del(id) &#123;</span><br><span class="line">    const user = await this.ctx.model.User.findById(id);</span><br><span class="line">    if (!user) &#123;</span><br><span class="line">      this.ctx.throw(404, &apos;user not found&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">    return user.destroy();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = User;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;egg-sequelize&quot;&gt;&lt;a href=&quot;#egg-sequelize&quot; class=&quot;headerlink&quot; title=&quot;egg-sequelize&quot;&gt;&lt;/a&gt;egg-sequelize&lt;/h3&gt;&lt;p&gt;在大型应用中，我们可能需要ORM框架来帮助我们管理数
      
    
    </summary>
    
      <category term="Egg学习笔记" scheme="http://yoursite.com/categories/Egg%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="egg" scheme="http://yoursite.com/tags/egg/"/>
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
      <category term="sequelize" scheme="http://yoursite.com/tags/sequelize/"/>
    
  </entry>
  
  <entry>
    <title>Sequelize 创建数据库表</title>
    <link href="http://yoursite.com/2019/03/15/egg/sequelize/Sequelize/"/>
    <id>http://yoursite.com/2019/03/15/egg/sequelize/Sequelize/</id>
    <published>2019-03-14T23:32:01.000Z</published>
    <updated>2019-06-06T06:55:32.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sequelize"><a href="#Sequelize" class="headerlink" title="Sequelize"></a>Sequelize</h1><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>Sequelize类型有很多，详情<a href="http://docs.sequelizejs.com/variable/index.html#static-variable-DataTypes" target="_blank" rel="noopener">DataType</a>。其中常用的有 <code>STRING</code>, <code>TEXT</code>, <code>INTEGER</code>, <code>FLOAT</code>, <code>DOUBLE</code>, <code>DATE</code>等。</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ul><li><p>创建数据库test_sequelize</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE test_sequelize DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure></li><li><p>创建文件夹sequelize，执行<code>npm init</code>;</p></li><li><code>cd sequelize</code>,并执行<code>npm i sequelize mysql2</code>;</li><li>创建以下文件夹<ul><li>app/model</li><li>app/db</li><li>app/utils</li></ul></li></ul><h3 id="创建连接"><a href="#创建连接" class="headerlink" title="创建连接"></a>创建连接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// db/index.js</span><br><span class="line">const Sequelize = requeire(&apos;sequelize&apos;);</span><br><span class="line">const dbconfig = &#123;</span><br><span class="line">    username: &apos;root&apos;,  // mysql用户名</span><br><span class="line">    password: &apos;root&apos;,  // mysql 密码</span><br><span class="line">    database: &apos;sequelize_test&apos;, // 数据库名</span><br><span class="line">    port: 3306,</span><br><span class="line">    host: &apos;localhost&apos;,</span><br><span class="line">    dialect: &apos;mysql&apos; // &apos;mysql&apos;|&apos;sqlite&apos;|&apos;postgres&apos;|&apos;mssql&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const &#123; username, password, database, port, host, dialect &#125; = dbconfig;</span><br><span class="line"></span><br><span class="line">const db = new Sequelize(database, username, password, &#123;</span><br><span class="line">    host,</span><br><span class="line">    port,</span><br><span class="line">    dialect,</span><br><span class="line">    pool: &#123;</span><br><span class="line">        max: 5,</span><br><span class="line">        min: 0,</span><br><span class="line">        idle: 100000</span><br><span class="line">    &#125;,</span><br><span class="line">    timezone: &apos;+08:00&apos; // 时区</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">module.exports = db;</span><br></pre></td></tr></table></figure><p>###</p><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const Sequelize = requeire(&apos;sequelize&apos;);</span><br><span class="line">const &#123; STRING, INTEGER &#125; = Sequelize;</span><br><span class="line">const db = require(&apos;../db&apos;);</span><br><span class="line"></span><br><span class="line">const User = db.define(&apos;user&apos;, &#123; // 表名</span><br><span class="line">    userId: &#123;</span><br><span class="line">        type: INTEGER</span><br><span class="line">    &#125;,</span><br><span class="line">    userName: &#123;</span><br><span class="line">        type: STRING</span><br><span class="line">    &#125;,</span><br><span class="line">    password: &#123;</span><br><span class="line">        type: STRING</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const createTable = () =&gt; &#123;</span><br><span class="line">    await User.sync(&#123;</span><br><span class="line">        force: false // 设置为true，则先删除在创建</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(async () =&gt; &#123;</span><br><span class="line">    await createTable()</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Sequelize&quot;&gt;&lt;a href=&quot;#Sequelize&quot; class=&quot;headerlink&quot; title=&quot;Sequelize&quot;&gt;&lt;/a&gt;Sequelize&lt;/h1&gt;&lt;h3 id=&quot;类型&quot;&gt;&lt;a href=&quot;#类型&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Egg学习笔记" scheme="http://yoursite.com/categories/Egg%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="egg" scheme="http://yoursite.com/tags/egg/"/>
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
      <category term="sequelize" scheme="http://yoursite.com/tags/sequelize/"/>
    
  </entry>
  
  <entry>
    <title>Flutter介绍</title>
    <link href="http://yoursite.com/2019/01/31/flutter/Flutter%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2019/01/31/flutter/Flutter介绍/</id>
    <published>2019-01-31T10:10:06.000Z</published>
    <updated>2019-06-04T10:24:58.430Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-移动开发技术简介"><a href="#1-移动开发技术简介" class="headerlink" title="1.移动开发技术简介"></a>1.移动开发技术简介</h2><p><a href="https://book.flutterchina.club/chapter1/mobile_development_intro.html" target="_blank" rel="noopener">移动开发技术简介</a></p><h2 id="2-Flutter简介"><a href="#2-Flutter简介" class="headerlink" title="2.Flutter简介"></a>2.Flutter简介</h2><p>Flutter是谷歌公司推出的一个移动应用开发框架，主要有跨平台、高保真、高性能等优点。基于dart语言开发，可以一套代码分别运行在IOS和Android平台上。Flutter有丰富的组件和接口。</p><h2 id="3-资源"><a href="#3-资源" class="headerlink" title="3.资源"></a>3.资源</h2><ul><li><a href="https://docs.flutter.io" target="_blank" rel="noopener">官网</a></li><li><a href="https://book.flutterchina.club" target="_blank" rel="noopener">Flutter中文网</a></li></ul><h2 id="4-搭建开发环境"><a href="#4-搭建开发环境" class="headerlink" title="4.搭建开发环境"></a>4.搭建开发环境</h2><p><a href="https://book.flutterchina.club/chapter1/install_flutter.html" target="_blank" rel="noopener">https://book.flutterchina.club/chapter1/install_flutter.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-移动开发技术简介&quot;&gt;&lt;a href=&quot;#1-移动开发技术简介&quot; class=&quot;headerlink&quot; title=&quot;1.移动开发技术简介&quot;&gt;&lt;/a&gt;1.移动开发技术简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://book.flutterchina.clu
      
    
    </summary>
    
      <category term="Flutter" scheme="http://yoursite.com/categories/Flutter/"/>
    
    
      <category term="移动端 Flutter" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF-Flutter/"/>
    
  </entry>
  
  <entry>
    <title>Electron[第一个Electron应用</title>
    <link href="http://yoursite.com/2018/12/21/electron/Electron-%E7%AC%AC%E4%B8%80%E4%B8%AAElectron%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2018/12/21/electron/Electron-第一个Electron应用/</id>
    <published>2018-12-21T13:05:40.000Z</published>
    <updated>2018-12-21T13:05:45.062Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Electron快速开始</title>
    <link href="http://yoursite.com/2018/12/21/electron/Electron%5B%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B%5D/"/>
    <id>http://yoursite.com/2018/12/21/electron/Electron[快速开始]/</id>
    <published>2018-12-21T12:15:01.000Z</published>
    <updated>2018-12-25T08:58:33.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Electron-介绍"><a href="#Electron-介绍" class="headerlink" title="Electron 介绍"></a>Electron 介绍</h2><ul><li>比你想象的更简单—对于前端人员，electron可以帮助其构建桌面应用，Electron文档上写道，只要你会写html，css，js就可以，剩下的事情交给Electron去做</li></ul><h4 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/electron/electron-quick-start</span><br><span class="line"></span><br><span class="line">cd electron-quick-start </span><br><span class="line"></span><br><span class="line">npm install &amp; npm start</span><br></pre></td></tr></table></figure><p>这个时候你就应该可以看到一个hello world</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Electron-介绍&quot;&gt;&lt;a href=&quot;#Electron-介绍&quot; class=&quot;headerlink&quot; title=&quot;Electron 介绍&quot;&gt;&lt;/a&gt;Electron 介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;比你想象的更简单—对于前端人员，electron可以帮助
      
    
    </summary>
    
      <category term="Electron学习" scheme="http://yoursite.com/categories/Electron%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Electron" scheme="http://yoursite.com/tags/Electron/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习笔记-镜像</title>
    <link href="http://yoursite.com/2018/12/16/docker/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E9%95%9C%E5%83%8F/"/>
    <id>http://yoursite.com/2018/12/16/docker/Docker学习笔记-镜像/</id>
    <published>2018-12-16T10:35:59.000Z</published>
    <updated>2019-06-04T11:24:29.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h1><hr><h2 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h2><ul><li>Docker Hub为开发者提供了数十万的镜像，可以为大家下载</li><li><p>可以通过 <strong>docker pull [NAME]:[TAG]</strong>, TAG如果不指定的话，会默认去拉取tag为latest的镜像，也就是最新版, <strong>docker pull</strong>可以修改下载仓库，切换到自己的私有仓库，</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull xxx(私有仓库地址)</span><br></pre></td></tr></table></figure></li><li><p>docker pull 子命令</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull -a --all-tags=true | false</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="查看镜像信息"><a href="#查看镜像信息" class="headerlink" title="查看镜像信息"></a>查看镜像信息</h2><ul><li>docker images<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/docker/get-images.png" alt="images" title="">                </div>                <div class="image-caption">images</div>            </figure>  REPOSITORY: 镜像来自于哪个仓库<br>  TAG: 镜像标签信息<br>  IMAGE ID: 镜像唯一ID<br>  CREATED: 创建时间，最后更新时间<br>  SIZE: 镜像大小(一般来说，越小越好)</li></ul><hr><h2 id="发布一个镜像"><a href="#发布一个镜像" class="headerlink" title="发布一个镜像"></a>发布一个镜像</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;镜像&quot;&gt;&lt;a href=&quot;#镜像&quot; class=&quot;headerlink&quot; title=&quot;镜像&quot;&gt;&lt;/a&gt;镜像&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;获取镜像&quot;&gt;&lt;a href=&quot;#获取镜像&quot; class=&quot;headerlink&quot; title=&quot;获取镜像&quot;&gt;&lt;/a&gt;获取
      
    
    </summary>
    
      <category term="Docker学习" scheme="http://yoursite.com/categories/Docker%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习系列笔记[docker常用命令]</title>
    <link href="http://yoursite.com/2018/12/14/docker/Docker%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0-docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/12/14/docker/Docker学习系列笔记-docker常用命令/</id>
    <published>2018-12-14T04:01:44.000Z</published>
    <updated>2018-12-21T12:12:05.083Z</updated>
    
    <content type="html"><![CDATA[<p>#查看当前docker版本<br>docker -v</p><p>#查看当前本地所有镜像<br>docker images</p><p>#构造镜像,用法docker build -t 镜像名称 .<br>docker build -t docker_demo .</p><p>#用于容器与主机之间的数据拷贝。用法docker cp 主机文件地址 容器内地址。12d7f14v45cv为容器id。<br>docker cp /www/runoob 12d7f14v45cv:/www/</p><p>#创建一个新的容器并运行，-d为后台执行，-p 9000:3000前面为主机端口，后面是容器端口。docker_demo镜像名<br>docker run -d -p 9000:3000 docker_demo</p><p>#启动已被停止的容器<br>docker start docker_demo</p><p>#关闭已被启动的容器<br>docker stop docker_demo</p><p>#重新启动容器<br>docker restart docker_demo</p><p>#杀掉一个运行中的容器。<br>docker kill -s KILL docker_demo</p><p>#删除一个或多少容器。-f :通过SIGKILL信号强制删除一个运行中的容器-l :移除容器间的网络连接，而非容器本身-v :-v 删除与容器关联的卷<br>docker rm -f docker_demo、docker_demo1</p><p>#在运行的容器中执行命令。104e28f2f072容器id<br>sudo docker exec -it 104e28f2f072 /bin/bash </p><p>#列出容器。 -a:所有容器包含没有运行的<br>docker ps </p><p>#获取容器获取容器的日志 104e28f2f072容器id，-t:显示时间戳<br>docker logs -f -t 104e28f2f072 </p><p>#登陆镜像仓库<br>docker login</p><p>#获取镜像<br>docker pull </p><p>#上传镜像<br>docker push</p><p>#查看指定镜像的创建历史。<br>docker history docker_demo</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#查看当前docker版本&lt;br&gt;docker -v&lt;/p&gt;
&lt;p&gt;#查看当前本地所有镜像&lt;br&gt;docker images&lt;/p&gt;
&lt;p&gt;#构造镜像,用法docker build -t 镜像名称 .&lt;br&gt;docker build -t docker_demo .&lt;/p&gt;
      
    
    </summary>
    
      <category term="Docker学习" scheme="http://yoursite.com/categories/Docker%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习系列笔记[镜像][容器][仓库]</title>
    <link href="http://yoursite.com/2018/12/13/docker/Docker%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0-%E9%95%9C%E5%83%8F-%E5%AE%B9%E5%99%A8-%E4%BB%93%E5%BA%93/"/>
    <id>http://yoursite.com/2018/12/13/docker/Docker学习系列笔记-镜像-容器-仓库/</id>
    <published>2018-12-13T10:27:46.000Z</published>
    <updated>2018-12-21T12:12:06.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="镜像、容器、仓库"><a href="#镜像、容器、仓库" class="headerlink" title="镜像、容器、仓库"></a>镜像、容器、仓库</h1><p>docker的核心概念————镜像、容器、仓库，docker大部分操作都是围绕这是三个概念做的</p><h2 id="镜像-images"><a href="#镜像-images" class="headerlink" title="镜像(images)"></a>镜像(images)</h2><ul><li>Docker的镜像概念类似于虚拟机里的镜像，是一个只读的模板，一个独立的文件系统，包括运行容器所需的数据，可以用来创建新的容器。</li></ul><h2 id="容器-container"><a href="#容器-container" class="headerlink" title="容器(container)"></a>容器(container)</h2><ul><li>Docker容器是由Docker镜像创建的运行实例。Docker容器类似虚拟机，可以支持的操作包括启动，停止，删除等。每个容器间是相互隔离的，容器中会运行特定的应用，包含特定应用的代码及所需的依赖文件。</li></ul><h2 id="仓库-container"><a href="#仓库-container" class="headerlink" title="仓库(container)"></a>仓库(container)</h2><ul><li><p>如果你使用过git和github就很容易理解Docker的仓库概念。Docker 仓库的概念跟Git 类似，注册服务器可以理解为 GitHub 这样的托管服务。</p></li><li><p>Docker 仓库是用来包含镜像的位置，Docker提供一个注册服务器（Register）来保存多个仓库，每个仓库又可以包含多个具备不同tag的镜像。Docker运行中使用的默认仓库是 Docker Hub 公共仓库。</p></li><li><p>仓库支持的操作类似git，当用户创建了自己的镜像之后就可以使用 push 命令将它上传到公有或者私有仓库，这样下次在另外一台机器上使用这个镜像时候，只需要从仓库上 pull 下来就可以了。</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>仓库是为镜像托管服务的（类似于Git）</li><li>容器是镜像实例化以后的，其中各个容器是相互独立的（类似于类实例化的结果）</li><li>镜像是一个只读文件，包含容器所运行的配置文件及数据（类似于类）</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/docker/images-container-registry.jpg" alt="image" title="">                </div>                <div class="image-caption">image</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;镜像、容器、仓库&quot;&gt;&lt;a href=&quot;#镜像、容器、仓库&quot; class=&quot;headerlink&quot; title=&quot;镜像、容器、仓库&quot;&gt;&lt;/a&gt;镜像、容器、仓库&lt;/h1&gt;&lt;p&gt;docker的核心概念————镜像、容器、仓库，docker大部分操作都是围绕这是三个概念做
      
    
    </summary>
    
      <category term="Docker学习" scheme="http://yoursite.com/categories/Docker%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker学习系列笔记[安装及启动]</title>
    <link href="http://yoursite.com/2018/12/13/docker/Docker%E5%AD%A6%E4%B9%A0%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0%5B%E5%AE%89%E8%A3%85%E5%8F%8A%E5%90%AF%E5%8A%A8%5D/"/>
    <id>http://yoursite.com/2018/12/13/docker/Docker学习系列笔记[安装及启动]/</id>
    <published>2018-12-13T02:24:33.000Z</published>
    <updated>2018-12-21T12:12:08.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-学习"><a href="#docker-学习" class="headerlink" title="docker 学习"></a>docker 学习</h1><h2 id="安装及启动"><a href="#安装及启动" class="headerlink" title="安装及启动"></a>安装及启动</h2><ul><li><p>CenOs</p><p>  1.通过yum安装：在CenOs7安装时，需要先添加docker下载源<br>  vi /etc/yum.repo.d/docker.repo</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[dockerrepo]</span><br><span class="line">    name=Docker Repository</span><br><span class="line"></span><br><span class="line">    baseurl=https://yum.dockerproject.org/repo/main/centos/7/</span><br><span class="line"></span><br><span class="line">    enabled=1</span><br><span class="line"></span><br><span class="line">    gpgcheck=1</span><br><span class="line"></span><br><span class="line">    gpgkey=https://yum.dockerproject.org/gpg</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br><span class="line">sudo yum install -y docker-engine</span><br></pre></td></tr></table></figure><p>  2.通过脚本安装</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com/ | sh</span><br></pre></td></tr></table></figure><p>  3.启动</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker.service</span><br></pre></td></tr></table></figure></li><li><p>Mac <a href="https://store.docker.com/editions/community/docker-ce-desktop-mac" target="_blank" rel="noopener">下载地址</a></p><p>  1.需注册后下载</p><p>  2.启动（状态栏icon即可启动）</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;docker-学习&quot;&gt;&lt;a href=&quot;#docker-学习&quot; class=&quot;headerlink&quot; title=&quot;docker 学习&quot;&gt;&lt;/a&gt;docker 学习&lt;/h1&gt;&lt;h2 id=&quot;安装及启动&quot;&gt;&lt;a href=&quot;#安装及启动&quot; class=&quot;header
      
    
    </summary>
    
      <category term="Docker学习" scheme="http://yoursite.com/categories/Docker%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>如何搭建自己的技术文档</title>
    <link href="http://yoursite.com/2018/12/12/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    <id>http://yoursite.com/2018/12/12/如何搭建自己的技术文档/</id>
    <published>2018-12-12T01:39:36.000Z</published>
    <updated>2018-12-12T11:30:26.016Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="学习笔记" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
</feed>
